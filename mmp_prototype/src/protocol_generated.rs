// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod nexus {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RESULT: u64 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RESULT: u64 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RESULT: [Result; 2] = [
  Result::SUCCESS,
  Result::FAILED,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Result(pub u64);
#[allow(non_upper_case_globals)]
impl Result {
  pub const SUCCESS: Self = Self(0);
  pub const FAILED: Self = Self(1);

  pub const ENUM_MIN: u64 = 0;
  pub const ENUM_MAX: u64 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::SUCCESS,
    Self::FAILED,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::SUCCESS => Some("SUCCESS"),
      Self::FAILED => Some("FAILED"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Result {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Result {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u64>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Result {
    type Output = Result;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u64>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Result {
  type Scalar = u64;
  #[inline]
  fn to_little_endian(self) -> u64 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u64) -> Self {
    let b = u64::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Result {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u64::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Result {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PACKET_TYPE: u16 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PACKET_TYPE: u16 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PACKET_TYPE: [PacketType; 3] = [
  PacketType::CG_LOGIN_REQ,
  PacketType::GC_LOGIN_RES,
  PacketType::GC_UPSERT_ACTOR_NOTI,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PacketType(pub u16);
#[allow(non_upper_case_globals)]
impl PacketType {
  pub const CG_LOGIN_REQ: Self = Self(0);
  pub const GC_LOGIN_RES: Self = Self(1);
  pub const GC_UPSERT_ACTOR_NOTI: Self = Self(2);

  pub const ENUM_MIN: u16 = 0;
  pub const ENUM_MAX: u16 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::CG_LOGIN_REQ,
    Self::GC_LOGIN_RES,
    Self::GC_UPSERT_ACTOR_NOTI,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::CG_LOGIN_REQ => Some("CG_LOGIN_REQ"),
      Self::GC_LOGIN_RES => Some("GC_LOGIN_RES"),
      Self::GC_UPSERT_ACTOR_NOTI => Some("GC_UPSERT_ACTOR_NOTI"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PacketType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PacketType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u16>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for PacketType {
    type Output = PacketType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for PacketType {
  type Scalar = u16;
  #[inline]
  fn to_little_endian(self) -> u16 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u16) -> Self {
    let b = u16::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PacketType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u16::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PacketType {}
// struct Color, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Color(pub [u8; 3]);
impl Default for Color { 
  fn default() -> Self { 
    Self([0; 3])
  }
}
impl core::fmt::Debug for Color {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Color")
      .field("r", &self.r())
      .field("g", &self.g())
      .field("b", &self.b())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Color {}
impl<'a> flatbuffers::Follow<'a> for Color {
  type Inner = &'a Color;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Color>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Color {
  type Inner = &'a Color;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Color>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Color {
    type Output = Color;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Color as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(1)
    }
}

impl<'a> flatbuffers::Verifiable for Color {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Color {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    r: i8,
    g: i8,
    b: i8,
  ) -> Self {
    let mut s = Self([0; 3]);
    s.set_r(r);
    s.set_g(g);
    s.set_b(b);
    s
  }

  pub fn r(&self) -> i8 {
    let mut mem = core::mem::MaybeUninit::<<i8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_r(&mut self, x: i8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<i8 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn g(&self) -> i8 {
    let mut mem = core::mem::MaybeUninit::<<i8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[1..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_g(&mut self, x: i8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[1..].as_mut_ptr(),
        core::mem::size_of::<<i8 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn b(&self) -> i8 {
    let mut mem = core::mem::MaybeUninit::<<i8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[2..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_b(&mut self, x: i8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[2..].as_mut_ptr(),
        core::mem::size_of::<<i8 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Vec2, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec2(pub [u8; 8]);
impl Default for Vec2 { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for Vec2 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec2")
      .field("x", &self.x())
      .field("y", &self.y())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec2 {}
impl<'a> flatbuffers::Follow<'a> for Vec2 {
  type Inner = &'a Vec2;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec2>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec2 {
  type Inner = &'a Vec2;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec2>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec2 {
    type Output = Vec2;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec2 as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(4)
    }
}

impl<'a> flatbuffers::Verifiable for Vec2 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec2 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_x(x);
    s.set_y(y);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct WorldActorInfo, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct WorldActorInfo(pub [u8; 32]);
impl Default for WorldActorInfo { 
  fn default() -> Self { 
    Self([0; 32])
  }
}
impl core::fmt::Debug for WorldActorInfo {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("WorldActorInfo")
      .field("actorIdx", &self.actorIdx())
      .field("position", &self.position())
      .field("moveSpeed", &self.moveSpeed())
      .field("direction", &self.direction())
      .field("color", &self.color())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for WorldActorInfo {}
impl<'a> flatbuffers::Follow<'a> for WorldActorInfo {
  type Inner = &'a WorldActorInfo;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a WorldActorInfo>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a WorldActorInfo {
  type Inner = &'a WorldActorInfo;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<WorldActorInfo>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for WorldActorInfo {
    type Output = WorldActorInfo;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const WorldActorInfo as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(8)
    }
}

impl<'a> flatbuffers::Verifiable for WorldActorInfo {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> WorldActorInfo {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    actorIdx: u64,
    position: &Vec2,
    moveSpeed: f32,
    direction: &Vec2,
    color: &Color,
  ) -> Self {
    let mut s = Self([0; 32]);
    s.set_actorIdx(actorIdx);
    s.set_position(position);
    s.set_moveSpeed(moveSpeed);
    s.set_direction(direction);
    s.set_color(color);
    s
  }

  pub fn actorIdx(&self) -> u64 {
    let mut mem = core::mem::MaybeUninit::<<u64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_actorIdx(&mut self, x: u64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn position(&self) -> &Vec2 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[8..].as_ptr() as *const Vec2) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_position(&mut self, x: &Vec2) {
    self.0[8..8 + 8].copy_from_slice(&x.0)
  }

  pub fn moveSpeed(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[16..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_moveSpeed(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[16..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn direction(&self) -> &Vec2 {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[20..].as_ptr() as *const Vec2) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_direction(&mut self, x: &Vec2) {
    self.0[20..20 + 8].copy_from_slice(&x.0)
  }

  pub fn color(&self) -> &Color {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[28..].as_ptr() as *const Color) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_color(&mut self, x: &Color) {
    self.0[28..28 + 3].copy_from_slice(&x.0)
  }

}

pub enum CG_LOGIN_REQOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CG_LOGIN_REQ<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CG_LOGIN_REQ<'a> {
  type Inner = CG_LOGIN_REQ<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CG_LOGIN_REQ<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_COLOR: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CG_LOGIN_REQ { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CG_LOGIN_REQArgs<'args>
  ) -> flatbuffers::WIPOffset<CG_LOGIN_REQ<'bldr>> {
    let mut builder = CG_LOGIN_REQBuilder::new(_fbb);
    if let Some(x) = args.color { builder.add_color(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CG_LOGIN_REQ::VT_NAME, None)}
  }
  #[inline]
  pub fn color(&self) -> Option<&'a Color> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Color>(CG_LOGIN_REQ::VT_COLOR, None)}
  }
}

impl flatbuffers::Verifiable for CG_LOGIN_REQ<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<Color>("color", Self::VT_COLOR, false)?
     .finish();
    Ok(())
  }
}
pub struct CG_LOGIN_REQArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub color: Option<&'a Color>,
}
impl<'a> Default for CG_LOGIN_REQArgs<'a> {
  #[inline]
  fn default() -> Self {
    CG_LOGIN_REQArgs {
      name: None,
      color: None,
    }
  }
}

pub struct CG_LOGIN_REQBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CG_LOGIN_REQBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CG_LOGIN_REQ::VT_NAME, name);
  }
  #[inline]
  pub fn add_color(&mut self, color: &Color) {
    self.fbb_.push_slot_always::<&Color>(CG_LOGIN_REQ::VT_COLOR, color);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CG_LOGIN_REQBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CG_LOGIN_REQBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CG_LOGIN_REQ<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CG_LOGIN_REQ<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CG_LOGIN_REQ");
      ds.field("name", &self.name());
      ds.field("color", &self.color());
      ds.finish()
  }
}
pub enum GC_LOGIN_RESOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GC_LOGIN_RES<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GC_LOGIN_RES<'a> {
  type Inner = GC_LOGIN_RES<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GC_LOGIN_RES<'a> {
  pub const VT_ACTORIDX: flatbuffers::VOffsetT = 4;
  pub const VT_RESULT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GC_LOGIN_RES { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GC_LOGIN_RESArgs
  ) -> flatbuffers::WIPOffset<GC_LOGIN_RES<'bldr>> {
    let mut builder = GC_LOGIN_RESBuilder::new(_fbb);
    builder.add_result(args.result);
    builder.add_actorIdx(args.actorIdx);
    builder.finish()
  }


  #[inline]
  pub fn actorIdx(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(GC_LOGIN_RES::VT_ACTORIDX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn result(&self) -> Result {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Result>(GC_LOGIN_RES::VT_RESULT, Some(Result::SUCCESS)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GC_LOGIN_RES<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("actorIdx", Self::VT_ACTORIDX, false)?
     .visit_field::<Result>("result", Self::VT_RESULT, false)?
     .finish();
    Ok(())
  }
}
pub struct GC_LOGIN_RESArgs {
    pub actorIdx: u64,
    pub result: Result,
}
impl<'a> Default for GC_LOGIN_RESArgs {
  #[inline]
  fn default() -> Self {
    GC_LOGIN_RESArgs {
      actorIdx: 0,
      result: Result::SUCCESS,
    }
  }
}

pub struct GC_LOGIN_RESBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GC_LOGIN_RESBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_actorIdx(&mut self, actorIdx: u64) {
    self.fbb_.push_slot::<u64>(GC_LOGIN_RES::VT_ACTORIDX, actorIdx, 0);
  }
  #[inline]
  pub fn add_result(&mut self, result: Result) {
    self.fbb_.push_slot::<Result>(GC_LOGIN_RES::VT_RESULT, result, Result::SUCCESS);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GC_LOGIN_RESBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GC_LOGIN_RESBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GC_LOGIN_RES<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GC_LOGIN_RES<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GC_LOGIN_RES");
      ds.field("actorIdx", &self.actorIdx());
      ds.field("result", &self.result());
      ds.finish()
  }
}
pub enum GC_UPSERT_ACTOR_NOTIOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GC_UPSERT_ACTOR_NOTI<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GC_UPSERT_ACTOR_NOTI<'a> {
  type Inner = GC_UPSERT_ACTOR_NOTI<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GC_UPSERT_ACTOR_NOTI<'a> {
  pub const VT_ACTORS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GC_UPSERT_ACTOR_NOTI { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GC_UPSERT_ACTOR_NOTIArgs<'args>
  ) -> flatbuffers::WIPOffset<GC_UPSERT_ACTOR_NOTI<'bldr>> {
    let mut builder = GC_UPSERT_ACTOR_NOTIBuilder::new(_fbb);
    if let Some(x) = args.actors { builder.add_actors(x); }
    builder.finish()
  }


  #[inline]
  pub fn actors(&self) -> Option<flatbuffers::Vector<'a, WorldActorInfo>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, WorldActorInfo>>>(GC_UPSERT_ACTOR_NOTI::VT_ACTORS, None)}
  }
}

impl flatbuffers::Verifiable for GC_UPSERT_ACTOR_NOTI<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, WorldActorInfo>>>("actors", Self::VT_ACTORS, false)?
     .finish();
    Ok(())
  }
}
pub struct GC_UPSERT_ACTOR_NOTIArgs<'a> {
    pub actors: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, WorldActorInfo>>>,
}
impl<'a> Default for GC_UPSERT_ACTOR_NOTIArgs<'a> {
  #[inline]
  fn default() -> Self {
    GC_UPSERT_ACTOR_NOTIArgs {
      actors: None,
    }
  }
}

pub struct GC_UPSERT_ACTOR_NOTIBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GC_UPSERT_ACTOR_NOTIBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_actors(&mut self, actors: flatbuffers::WIPOffset<flatbuffers::Vector<'b , WorldActorInfo>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GC_UPSERT_ACTOR_NOTI::VT_ACTORS, actors);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GC_UPSERT_ACTOR_NOTIBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GC_UPSERT_ACTOR_NOTIBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GC_UPSERT_ACTOR_NOTI<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GC_UPSERT_ACTOR_NOTI<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GC_UPSERT_ACTOR_NOTI");
      ds.field("actors", &self.actors());
      ds.finish()
  }
}
}  // pub mod Nexus

